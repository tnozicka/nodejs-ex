#!/usr/bin/groovy
node ('nodejs') {
    stage 'Checkout'
    checkout scm

    sh 'set -o pipefail && curl -L https://github.com/tnozicka/origin/releases/download/latest/oc.tar.xz | tar -xJ -f -'  // we need to get newest 'oc' tool until the features are in stable release
    sh 'oc login https://kubernetes.default/ --token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) --certificate-authority=/run/secrets/kubernetes.io/serviceaccount/ca.crt'

    // Prepare the deployments so you can see pipeline in console overview when running for the first time
    sh 'oc process -f .openshift-pipeline/deployment-template.yaml -v "APP_NAME=nodejs-ex" | oc apply -f -'
    // Prepare BC and IS
    sh 'oc process -f .openshift-pipeline/build-template.yaml -v "APP_NAME=nodejs-ex" | oc apply -f -'


    stage 'Deploy MongoDB'
    sh 'oc process -f .openshift-pipeline/mongodb-deployment-template.yaml | oc apply -f -'


    stage 'Create Image'
    sh 'oc start-build nodejs-ex --from-repo=. --follow --wait'
    // "oc start-build" should provide us with image_ref, but let's hack it for now
    sh 'oc get is nodejs-ex -o go-template --template=\'{{range .status.tags}}{{if eq .tag "latest"}}{{(index .items 0).dockerImageReference}}{{end}}{{end}}\' > /tmp/pipeline-image_ref'
    def image_ref = readFile '/tmp/pipeline-image_ref'


    stage 'Deploy'
    // Simulate "oc rollout latest" until it gets merged to Origin
    sh "./oc set image dc/nodejs-ex nodejs-ex=${image_ref}"
    sh './oc deploy nodejs-ex --latest --follow'
    sh '''
        function status {
            local version="$(oc get dc nodejs-ex -o template --template='{{.status.latestVersion}}' || true)"
            if ! [[ "${version}" =~ ^[0-9]+$ ]]; then
                echo "Unknown" && return;
            fi

            local phase="$(oc get rc nodejs-ex-${version} -o template --template='{{index .metadata.annotations "openshift.io/deployment.phase"}}')"

            echo ${phase}
        }

        while [[ "$(status)" == "Running" ]]; do echo "Waiting for deployment to finish" && sleep 1; done
        if [[ "$(status)" != "Complete" ]]; then
            exit 1;
        fi
    '''//.stripMargin()
    // oc rollout is not merged yet; the hack above won't be needed after that
    // sh './oc rollout status nodejs-ex'  // to ensure proper return code; will not be nessecary with 'oc rollout latest --follow --wait' if --wait makes it to master


    stage 'Integration Tests'
    sh 'npm install mocha-multi && npm install -r package.json'
    sh 'HTTP_TEST_SERVER="http://nodejs-ex:8080" multi="xunit=report.xml spec=-" ./node_modules/mocha/bin/mocha --timeout 5000 ./tests/app_test.js --reporter mocha-multi'
    archive 'report.xml'
    step([$class: 'JUnitResultArchiver', testResults: 'report.xml'])
}
